plugins {
    id 'java'
    //testing plugin on server
    id("xyz.jpenilla.run-paper") version "2.1.0"
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.20.1")
    }
}

group = 'me.astroreen'

repositories {
    mavenCentral()

    //Paper
    maven {
        name = 'papermc-repo'
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    //PlaceholderAPI
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    mavenLocal()
}

dependencies {
    //Paper
    compileOnly 'io.papermc.paper:paper-api:1.19.3-R0.1-SNAPSHOT'

    //My library
    implementation files('run/plugins/AstroLibs-1.02.05+build022.jar')

    //Kyori Adventure Library
    implementation('net.kyori:adventure-api:4.12.0')
    //PlaceholderAPI
    compileOnly 'me.clip:placeholderapi:2.11.2'
    //LuckPerms
    compileOnly("net.luckperms:api:5.4")
    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    //Ansi colors for console
    implementation 'org.fusesource.jansi:jansi:2.4.0'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

task updateMajor () {
    doLast {
        def versionPropertiesFile = file('gradle.properties')
        def versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionPropertiesFile))

        def currentVersion = versionProperties.getProperty('version')
        def versionParts = currentVersion.split("\\.")
        def buildParts = versionParts[2].split("\\+build")
        def buildNumber = buildParts[1].toInteger() + 1
        def majorNumber = versionParts[0].toInteger() + 1
        def newVersion = "${majorNumber}.${versionParts[1]}.${buildParts[0]}+build${buildNumber.toString().padLeft(3, '0')}"

        versionProperties.setProperty('version', newVersion)
        versionProperties.store(versionPropertiesFile.newWriter(), null)

        println("Version was updated from $currentVersion to $newVersion")
    }
}

task updateMinor () {
    doLast {
        def versionPropertiesFile = file('gradle.properties')
        def versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionPropertiesFile))

        def currentVersion = versionProperties.getProperty('version')
        def versionParts = currentVersion.split("\\.")
        def buildParts = versionParts[2].split("\\+build");
        def buildNumber = buildParts[1].toInteger() + 1
        def minorNumber = versionParts[1].toInteger() + 1
        def newVersion = "${versionParts[0]}.${minorNumber.toString().padLeft(2, '0')}.${buildParts[0]}+build${buildNumber.toString().padLeft(3, '0')}"

        versionProperties.setProperty('version', newVersion)
        versionProperties.store(versionPropertiesFile.newWriter(), null)

        println("Version was updated from $currentVersion to $newVersion")
    }
}

task updatePatch () {
    doLast {
        def versionPropertiesFile = file('gradle.properties')
        def versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionPropertiesFile))

        def currentVersion = versionProperties.getProperty('version')
        def versionParts = currentVersion.split("\\.")
        def buildParts = versionParts[2].split("\\+build")
        def patchNumber = buildParts[0].toInteger() + 1
        def buildNumber = buildParts[1].toInteger() + 1
        def newVersion = "${versionParts[0]}.${versionParts[1]}.${patchNumber.toString().padLeft(2, '0')}+build${buildNumber.toString().padLeft(3, '0')}"

        versionProperties.setProperty('version', newVersion)
        versionProperties.store(versionPropertiesFile.newWriter(), null)

        println("Version was updated from $currentVersion to $newVersion")
    }
}

task updateBuild {
    doLast {
        def versionPropertiesFile = file('gradle.properties')
        def versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionPropertiesFile))

        def currentVersion = versionProperties.getProperty('version')
        def versionParts = currentVersion.split("\\+build")
        def buildNumber = versionParts[1].toInteger() + 1
        def newVersion = "${versionParts[0]}+build${buildNumber.toString().padLeft(3, '0')}"

        versionProperties.setProperty('version', newVersion)
        versionProperties.store(versionPropertiesFile.newWriter(), null)

        println("Version was updated from $currentVersion to $newVersion")
    }
}
